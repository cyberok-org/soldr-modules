local strategy = require("exploit_mitigation")

describe("apply_policy", function()
    it("applies DEP policy config and returns the previous one", function()
        local policy_name = "data_execution_prevention"
        local policy_params = {
            Enable = true,
            Permanent = true,
            DisableAtlThunkEmulation = true,
        }

        local old_params = strategy.apply_policy(policy_name, policy_params)

        assert.is_table(old_params)
        for key, _ in pairs(policy_params) do
            assert.is_not_nil(old_params[key])
            assert.equal(type(policy_params[key]), type(old_params[key]))
        end
    end)
    it("applies ASLR policy config and returns the previous one", function()
        local policy_name = "address_space_layout_randomization"
        local policy_params = {
            EnableBottomUpRandomization = true,
            EnableForceRelocateImages = true,
            EnableHighEntropy = true,
            DisallowStrippedImages = true,
        }

        local old_params = strategy.apply_policy(policy_name, policy_params)

        assert.is_table(old_params)
        for key in pairs(policy_params) do
            assert.is_not_nil(old_params[key])
            assert.equal(type(policy_params[key]), type(old_params[key]))
        end
    end)
end)

describe("apply", function()
    it("returns previous profile on successfull applience", function()
        local old_profile = strategy.apply(strategy.HARDENED_PROFILE)

        assert.is_table(old_profile)
        for policy_name in pairs(strategy.HARDENED_PROFILE) do
            local old_params = old_profile[policy_name]
            assert.is_table(old_params)
        end
    end)
end)
