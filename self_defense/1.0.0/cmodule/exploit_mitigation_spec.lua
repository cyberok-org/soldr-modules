local strategy = require("exploit_mitigation")

local POLICIES = {
    data_execution_prevention = {
        Enable = true,
        Permanent = true,
        DisableAtlThunkEmulation = true,
    },
    address_space_layout_randomization = {
        EnableBottomUpRandomization = true,
        EnableForceRelocateImages = true,
        EnableHighEntropy = true,
        DisallowStrippedImages = true,
    },
    dynamic_code = {
        ProhibitDynamicCode = false, -- causes the lua to crash
        AllowThreadOptOut = false,
        AllowRemoteDowngrade = false,
        AuditProhibitDynamicCode = true,
    },
    strict_handle_check = {
        RaiseExceptionOnInvalidHandleReference = true,
        HandleExceptionsPermanentlyEnabled = true,
    },
    system_call_disable = {
        DisallowWin32kSystemCalls = false,
        AuditDisallowWin32kSystemCalls = false,
    },
    extension_point_disable = {
        DisableExtensionPoints = true,
    },
    control_flow_guard = {
        EnableControlFlowGuard = false,
        EnableExportSuppression = false,
        StrictMode = false,
        EnableXfg = false,
        EnableXfgAuditMode = false,
    },
    binary_signature = {
        MicrosoftSignedOnly = false,
        StoreSignedOnly = false,
        MitigationOptIn = false,
        AuditMicrosoftSignedOnly = false,
        AuditStoreSignedOnly = false,
    },
    font_disable = {
        DisableNonSystemFonts = true,
        AuditNonSystemFontLoading = true,
    },
    image_load = {
        NoRemoteImages = true,
        NoLowMandatoryLabelImages = true,
        PreferSystem32Images = true,
        AuditNoRemoteImages = true,
        AuditNoLowMandatoryLabelImages = true,
    },
    redirection_trust = {
        EnforceRedirectionTrust = true,
        AuditRedirectionTrust = true,
    },
    side_channel_isolation = {
        SmtBranchTargetIsolation = true,
        IsolateSecurityDomain = true,
        DisablePageCombine = true,
        SpeculativeStoreBypassDisable = true,
        RestrictCoreSharing = true,
    },
    user_shadow_stack = {
        EnableUserShadowStack = true,
        AuditUserShadowStack = true,
        SetContextIpValidation = true,
        AuditSetContextIpValidation = true,
        EnableUserShadowStackStrictMode = true,
        BlockNonCetBinaries = true,
        BlockNonCetBinariesNonEhcont = true,
        CetDynamicApisOutOfProcOnly = true,
        SetContextIpValidationRelaxedMode = false,
    },
}

describe("apply_policy", function()
    it("applies policy and returns the previous configuration", function()
        for policy_name, policy_params in pairs(POLICIES) do
            local old_params = strategy.apply_policy(policy_name, policy_params)

            assert.is_table(old_params)
            for key in pairs(policy_params) do
                assert.is_not_nil(old_params[key])
                assert.equal(type(policy_params[key]), type(old_params[key]))
            end
        end
    end)
end)

describe("apply", function()
    it("returns previous profile on successfull applience", function()
        local old_profile = strategy.apply(POLICIES)

        assert.is_table(old_profile)
        for policy_name in pairs(POLICIES) do
            local old_params = old_profile[policy_name]
            assert.is_table(old_params)
        end
    end)
end)
