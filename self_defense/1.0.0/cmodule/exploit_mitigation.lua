require("waffi.headers.windows")
local lk32 = require("waffi.windows.kernel32")
local ffi = require("ffi")

local strategy = {}

strategy.HARDENED_PROFILE = {
    data_execution_prevention = {
        Enable = true,
        Permanent = true,
        DisableAtlThunkEmulation = true,
    },
    address_space_layout_randomization = {
        EnableBottomUpRandomization = true,
        EnableForceRelocateImages = true,
        EnableHighEntropy = true,
        DisallowStrippedImages = true,
    },
    dynamic_code = {
        ProhibitDynamicCode = false, -- causes the lua to crash
        AllowThreadOptOut = false,
        AllowRemoteDowngrade = false,
        AuditProhibitDynamicCode = true,
    },
    strict_handle_check = {
        RaiseExceptionOnInvalidHandleReference = true,
        HandleExceptionsPermanentlyEnabled = true,
    },
    system_call_disable = {
        DisallowWin32kSystemCalls = false,
        AuditDisallowWin32kSystemCalls = false,
    },
    extension_point_disable = {
        DisableExtensionPoints = true,
    },
    control_flow_guard = {
        EnableControlFlowGuard = false,
        EnableExportSuppression = false,
        StrictMode = false,
        EnableXfg = false,
        EnableXfgAuditMode = false,
    },
    binary_signature = {
        MicrosoftSignedOnly = false,
        StoreSignedOnly = false,
        MitigationOptIn = false,
        AuditMicrosoftSignedOnly = false,
        AuditStoreSignedOnly = false,
    },
    font_disable = {
        DisableNonSystemFonts = true,
        AuditNonSystemFontLoading = true,
    },
}

--- Gets the last error as a string.
---@return string error
local function get_last_error()
    return tostring(lk32.GetLastError())
end

ffi.cdef([[
typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessControlFlowGuardPolicy,
    ProcessSignaturePolicy,
    ProcessFontDisablePolicy,
    ProcessImageLoadPolicy,
    ProcessSystemCallFilterPolicy,
    ProcessPayloadRestrictionPolicy,
    ProcessChildProcessPolicy,
    ProcessSideChannelIsolationPolicy,
    ProcessUserShadowStackPolicy,
    ProcessRedirectionTrustPolicy,
    ProcessUserPointerAuthPolicy,
    ProcessSEHOPPolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD Enable : 1;
            DWORD DisableAtlThunkEmulation : 1;
            DWORD ReservedFlags : 30;
        };
    };
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableBottomUpRandomization : 1;
            DWORD EnableForceRelocateImages : 1;
            DWORD EnableHighEntropy : 1;
            DWORD DisallowStrippedImages : 1;
            DWORD ReservedFlags : 28;
        };
    };
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
  union {
    DWORD Flags;
    struct {
      DWORD ProhibitDynamicCode : 1;
      DWORD AllowThreadOptOut : 1;
      DWORD AllowRemoteDowngrade : 1;
      DWORD AuditProhibitDynamicCode : 1;
      DWORD ReservedFlags : 28;
    };
  };
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
  union {
    DWORD Flags;
    struct {
      DWORD RaiseExceptionOnInvalidHandleReference : 1;
      DWORD HandleExceptionsPermanentlyEnabled : 1;
      DWORD ReservedFlags : 30;
    };
  };
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
  union {
    DWORD Flags;
    struct {
      DWORD DisallowWin32kSystemCalls : 1;
      DWORD AuditDisallowWin32kSystemCalls : 1;
      DWORD ReservedFlags : 30;
    };
  };
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
  union {
    DWORD Flags;
    struct {
      DWORD DisableExtensionPoints : 1;
      DWORD ReservedFlags : 31;
    };
  };
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
  union {
    DWORD Flags;
    struct {
      DWORD EnableControlFlowGuard : 1;
      DWORD EnableExportSuppression : 1;
      DWORD StrictMode : 1;
      DWORD EnableXfg : 1;
      DWORD EnableXfgAuditMode : 1;
      DWORD ReservedFlags : 27;
    };
  };
} PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY, *PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;

typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
  union {
    DWORD Flags;
    struct {
      DWORD MicrosoftSignedOnly : 1;
      DWORD StoreSignedOnly : 1;
      DWORD MitigationOptIn : 1;
      DWORD AuditMicrosoftSignedOnly : 1;
      DWORD AuditStoreSignedOnly : 1;
      DWORD ReservedFlags : 27;
    };
  };
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;

typedef struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
  union {
    DWORD Flags;
    struct {
      DWORD DisableNonSystemFonts : 1;
      DWORD AuditNonSystemFontLoading : 1;
      DWORD ReservedFlags : 30;
    };
  };
} PROCESS_MITIGATION_FONT_DISABLE_POLICY, *PPROCESS_MITIGATION_FONT_DISABLE_POLICY;
]])

local mitigation_policies = {
    data_execution_prevention = {
        id = ffi.C.ProcessDEPPolicy,
        schema = "PROCESS_MITIGATION_DEP_POLICY",
    },
    address_space_layout_randomization = {
        id = ffi.C.ProcessASLRPolicy,
        schema = "PROCESS_MITIGATION_ASLR_POLICY",
    },
    dynamic_code = {
        id = ffi.C.ProcessDynamicCodePolicy,
        schema = "PROCESS_MITIGATION_DYNAMIC_CODE_POLICY",
    },
    strict_handle_check = {
        id = ffi.C.ProcessStrictHandleCheckPolicy,
        schema = "PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY",
    },
    system_call_disable = {
        id = ffi.C.ProcessSystemCallDisablePolicy,
        schema = "PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY",
    },
    extension_point_disable = {
        id = ffi.C.ProcessExtensionPointDisablePolicy,
        schema = "PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY",
    },
    control_flow_guard = {
        id = ffi.C.ProcessControlFlowGuardPolicy,
        schema = "PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY",
    },
    binary_signature = {
        id = ffi.C.ProcessSignaturePolicy,
        schema = "PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY",
    },
    font_disable = {
        id = ffi.C.ProcessFontDisablePolicy,
        schema = "PROCESS_MITIGATION_FONT_DISABLE_POLICY",
    },
}

ffi.cdef([[
BOOL SetProcessMitigationPolicy(PROCESS_MITIGATION_POLICY MitigationPolicy,
                                PVOID lpBuffer, SIZE_T dwLength);

BOOL GetProcessMitigationPolicy(HANDLE hProcess,
                                PROCESS_MITIGATION_POLICY MitigationPolicy,
                                PVOID lpBuffer, SIZE_T dwLength);
]])

---Applies the `config` for the specified mitigation policy `name`
---and returns the previous configuration.
---@param name string name of the mitigation policy
---@param config table configuration to apply
---@return table|nil old configuration
---@return string|nil error string explaining the problem, if any
function strategy.apply_policy(name, config)
    local policy = mitigation_policies[name]
    local buf = ffi.new(policy.schema)
    local len = ffi.sizeof(policy.schema)
    local process = lk32.GetCurrentProcess()
    local ret = ffi.C.GetProcessMitigationPolicy(process, policy.id, buf, len)
    if not ret then
        return nil, get_last_error()
    end
    local old_config = {}
    for key, value in pairs(config) do
        old_config[key] = (buf[key] ~= 0)
        buf[key] = value
    end
    ret = ffi.C.SetProcessMitigationPolicy(policy.id, buf, len)
    if not ret then
        return nil, get_last_error()
    end
    return old_config
end

function strategy.apply(profile)
    local old_profile = {}
    for policy_name, policy_params in pairs(profile) do
        local old_params, err =
            strategy.apply_policy(policy_name, policy_params)
        if not old_params then
            -- TODO: rollback all applied policies and return error
            return nil, err
        end
        old_profile[policy_name] = old_params
    end
    return old_profile
end

return strategy
